var dpChartWidth = 400; var dpChartHeight = 300; var dpPlanetLabelFont = "15px monospace"; var dpZodiacLabelFont = "12px monospace"; var dpCanvasFont = "13px monospace"; var dpWatermarkFont = "12px monospace"; var dpCanvasSmallerFont = "10px monospace"; var mX1, mX2, mX3, mX4, mX5, mX6, mX7; var mY1, mY2, mY3, mY4, mY5, mY6, mY7; var dpSwastikaSize = 0; var dpYPointsAdjustment = 8; var dpChartWatermark = "Drikp.com"; document.addEventListener("DOMContentLoaded", function () { if (typeof dpChartCanvasId !== 'undefined') { prepareToDrawKundaliChart(dpChartCanvasId); if ('undefined' !== typeof (dpSecondChartCanvasId)) { prepareToDrawKundaliChart(dpSecondChartCanvasId); } } }); function drawIntervalKundaliChart(chartCanvasId, chartSuffix) { dpHouseNoPositionList = window["dpHouseNoPositionList" + chartSuffix.toString()]; dpPlanetPositionList = window["dpPlanetPositionList" + chartSuffix.toString()]; dpZodiacPositionList = window["dpZodiacPositionList" + chartSuffix.toString()]; prepareToDrawKundaliChart(chartCanvasId); console.log("chart with chartCanvasId = " + chartCanvasId + " drawn"); } function prepareToRedrawKundaliChart(chartCanvasId) { prepareToDrawKundaliChart(chartCanvasId); } function prepareToDrawKundaliChart(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); if (kundaliChartCanvas && kundaliChartCanvas.getContext) { var canvasWidth = kundaliChartCanvas.width; var canvasHeight = kundaliChartCanvas.height; var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.font = getChartCanvasFontSize(); canvasPaintContext.lineWidth = 1; canvasPaintContext.strokeStyle = dpLineHexColor; canvasPaintContext.fillStyle = dpBackgroundColor; canvasPaintContext.fillRect(0, 0, canvasWidth, canvasHeight); dpSwastikaSize = kundaliChartCanvas.width / 40; drawCanvasBackgroundImage(chartCanvasId); drawKundaliChart(chartCanvasId); drawDrikpanchangWatermark(chartCanvasId); } } function getChartCanvasFontSize() { var fontSize = dpCanvasFont; var pageLanguage = getCookie('dkplanguage'); if ('hi' === pageLanguage || 'mr' === pageLanguage || 'en' === pageLanguage) { fontSize = dpCanvasFont; } else if ('ta' === pageLanguage || 'te' === pageLanguage || 'ml' === pageLanguage) { fontSize = dpCanvasSmallerFont; } return fontSize; } function drawCanvasBackgroundImage(chartCanvasId) { if ("undefined" !== typeof dpBackgroundImageURL) { var backgroundImage = new Image(); backgroundImage.src = dpBackgroundImageURL; backgroundImage.onload = function () { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.drawImage(backgroundImage, 0, 0); } } } function drawKundaliChart(chartCanvasId) { setElementCoordinates(chartCanvasId); drawKundaliChartOuterRectangle(chartCanvasId); drawChartCommonCoreShape(chartCanvasId); var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.globalAlpha = 0.75; if ('east' === dpAJAXChartStyle) { drawEastKundaliChartLines(chartCanvasId); } else if ('south' === dpAJAXChartStyle) { drawSouthKundaliChartLines(chartCanvasId); } else { drawNorthKundaliChartLines(chartCanvasId); } canvasPaintContext.globalAlpha = 1; if ('undefined' !== typeof (dpSecondChartCanvasId) && dpSecondChartCanvasId === chartCanvasId) { drawHouseNumbersOnCanvas(chartCanvasId, dpHouseNoPositionListSecond); drawPlanetLabelsOnCanvas(chartCanvasId, dpPlanetPositionListSecond); drawZodiacLabelsOnCanvas(chartCanvasId, dpZodiacPositionListSecond); } else { if (typeof dpHouseNoPositionList !== 'undefined' && null != dpHouseNoPositionList) drawHouseNumbersOnCanvas(chartCanvasId, dpHouseNoPositionList); if (typeof dpPlanetPositionList !== 'undefined' && null != dpPlanetPositionList) drawPlanetLabelsOnCanvas(chartCanvasId, dpPlanetPositionList); if (typeof dpZodiacPositionList !== 'undefined' && null != dpZodiacPositionList) drawZodiacLabelsOnCanvas(chartCanvasId, dpZodiacPositionList); } } function setElementCoordinates(chartCanvasId) { calculateElementDimension(chartCanvasId); calculateBasicDrawingCoordinates(); } function calculateElementDimension(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); dpChartWidth = (0 !== dpChartWidth) ? dpChartWidth : kundaliChartCanvas.offsetWidth; dpChartHeight = (0 !== dpChartHeight) ? dpChartHeight : kundaliChartCanvas.offsetHeight; } function calculateBasicDrawingCoordinates() { mX1 = dpCriticalPointsList[0][0]; mX2 = dpCriticalPointsList[1][0]; mX3 = dpCriticalPointsList[2][0]; mX4 = dpCriticalPointsList[3][0]; mX5 = dpCriticalPointsList[4][0]; mX6 = dpCriticalPointsList[5][0]; mX7 = dpCriticalPointsList[6][0]; mY1 = dpCriticalPointsList[0][1]; mY2 = dpCriticalPointsList[1][1]; mY3 = dpCriticalPointsList[2][1]; mY4 = dpCriticalPointsList[3][1]; mY5 = dpCriticalPointsList[4][1]; mY6 = dpCriticalPointsList[5][1]; mY7 = dpCriticalPointsList[6][1]; } function drawKundaliChartOuterRectangle(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.moveTo(mX3, mY3); canvasPaintContext.lineTo(mX5, mY3); canvasPaintContext.lineTo(mX5, mY5); canvasPaintContext.lineTo(mX3, mY5); canvasPaintContext.lineTo(mX3, mY3); canvasPaintContext.stroke(); } function drawChartCommonCoreShape(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); var halfSwastikaSize = dpSwastikaSize / 2; canvasPaintContext.beginPath(); canvasPaintContext.moveTo(mX1 - dpSwastikaSize, mY1 - dpSwastikaSize); canvasPaintContext.lineTo(mX1 - dpSwastikaSize, mY1); canvasPaintContext.lineTo(mX1 + dpSwastikaSize, mY1); canvasPaintContext.lineTo(mX1 + dpSwastikaSize, mY1 + dpSwastikaSize); canvasPaintContext.moveTo(mX1 - dpSwastikaSize, mY1 + dpSwastikaSize); canvasPaintContext.lineTo(mX1, mY1 + dpSwastikaSize); canvasPaintContext.lineTo(mX1, mY1 - dpSwastikaSize); canvasPaintContext.lineTo(mX1 + dpSwastikaSize, mY1 - dpSwastikaSize); canvasPaintContext.fillStyle = dpDotFillColor; canvasPaintContext.fillRect(mX1 - halfSwastikaSize, mY1 - halfSwastikaSize, 1, 1); canvasPaintContext.fillRect(mX1 + halfSwastikaSize, mY1 - halfSwastikaSize, 1, 1); canvasPaintContext.fillRect(mX1 - halfSwastikaSize, mY1 + halfSwastikaSize, 1, 1); canvasPaintContext.fillRect(mX1 + halfSwastikaSize, mY1 + halfSwastikaSize, 1, 1); } function drawNorthKundaliChartLines(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.moveTo(mX1 - dpSwastikaSize, mY1 - dpSwastikaSize); canvasPaintContext.lineTo(mX3, mY3); canvasPaintContext.moveTo(mX1 + dpSwastikaSize, mY1 - dpSwastikaSize); canvasPaintContext.lineTo(mX5, mY3); canvasPaintContext.moveTo(mX1 - dpSwastikaSize, mY1 + dpSwastikaSize); canvasPaintContext.lineTo(mX3, mY5); canvasPaintContext.moveTo(mX1 + dpSwastikaSize, mY1 + dpSwastikaSize); canvasPaintContext.lineTo(mX5, mY5); canvasPaintContext.moveTo(mX1, mY3); var curvePoint = dpChartWidth / 7; var adjustedCurvePoint = 1.3 * curvePoint; canvasPaintContext.bezierCurveTo(mX1, mY3 + curvePoint, mX4, mY2 - curvePoint, mX7, mY6); canvasPaintContext.bezierCurveTo(mX7 + curvePoint, mY6, mX5 - curvePoint, mY1, mX5, mY1); canvasPaintContext.bezierCurveTo(mX5 - adjustedCurvePoint, mY1, mX4 + curvePoint, mY4, mX7, mY7); canvasPaintContext.bezierCurveTo(mX7, mY7 + curvePoint, mX1, mY5 - curvePoint, mX1, mY5); canvasPaintContext.bezierCurveTo(mX1, mY5 - adjustedCurvePoint, mX2, mY4 + curvePoint, mX6, mY7); canvasPaintContext.bezierCurveTo(mX6 - adjustedCurvePoint, mY7, mX3 + curvePoint, mY1, mX3, mY1); canvasPaintContext.bezierCurveTo(mX3 + curvePoint, mY1, mX2 - curvePoint, mY2, mX6, mY6); canvasPaintContext.bezierCurveTo(mX6, mY6 - adjustedCurvePoint, mX1, mY3 + curvePoint, mX1, mY3); canvasPaintContext.stroke(); } function drawSouthKundaliChartLines(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.moveTo(mX2, mY3); canvasPaintContext.lineTo(mX2, mY5); canvasPaintContext.moveTo(mX4, mY5); canvasPaintContext.lineTo(mX4, mY3); canvasPaintContext.moveTo(mX3, mY2); canvasPaintContext.lineTo(mX5, mY2); canvasPaintContext.moveTo(mX5, mY4); canvasPaintContext.lineTo(mX3, mY4); canvasPaintContext.moveTo(mX1, mY3); canvasPaintContext.lineTo(mX1, mY2); canvasPaintContext.moveTo(mX1, mY4); canvasPaintContext.lineTo(mX1, mY5); canvasPaintContext.moveTo(mX3, mY1); canvasPaintContext.lineTo(mX2, mY1); canvasPaintContext.moveTo(mX4, mY1); canvasPaintContext.lineTo(mX5, mY1); canvasPaintContext.stroke(); } function drawEastKundaliChartLines(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.moveTo(mX3, mY6); canvasPaintContext.lineTo(mX5, mY6); canvasPaintContext.moveTo(mX3, mY7); canvasPaintContext.lineTo(mX5, mY7); canvasPaintContext.moveTo(mX6, mY3); canvasPaintContext.lineTo(mX6, mY5); canvasPaintContext.moveTo(mX7, mY3); canvasPaintContext.lineTo(mX7, mY5); canvasPaintContext.moveTo(mX3, mY3); canvasPaintContext.lineTo(mX6, mY6); canvasPaintContext.moveTo(mX5, mY3); canvasPaintContext.lineTo(mX7, mY6); canvasPaintContext.moveTo(mX5, mY5); canvasPaintContext.lineTo(mX7, mY7); canvasPaintContext.moveTo(mX3, mY5); canvasPaintContext.lineTo(mX6, mY7); canvasPaintContext.stroke(); } function drawHouseNumbersOnCanvas(chartCanvasId, houseNoPositionList) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.fillStyle = dpHouseNoColor; for (var index in houseNoPositionList) { if (houseNoPositionList.hasOwnProperty(index)) { var houseData = houseNoPositionList[index]; var positionX = houseData[0]; var positionY = houseData[1] + dpYPointsAdjustment; var houseNumber = houseData[2]; canvasPaintContext.fillText(houseNumber, positionX, positionY); } } } function drawPlanetLabelsOnCanvas(chartCanvasId, planetPositionList) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); for (var index in planetPositionList) { if (planetPositionList.hasOwnProperty(index)) { var planetData = planetPositionList[index]; var positionX = planetData[0]; var positionY = planetData[1] + dpYPointsAdjustment; var planetName = planetData[2]; canvasPaintContext.fillStyle = dpPlanetLabelColorList[index.toString()]; canvasPaintContext.font = dpPlanetLabelFont; canvasPaintContext.fontWeight = 'bold'; canvasPaintContext.fillText(planetName, positionX, positionY); } } } function drawZodiacLabelsOnCanvas(chartCanvasId, zodiacPositionList) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); var kundaliRashiNameStatus = getCookie('dkpchartrashitagsstatus'); if ('visible' === kundaliRashiNameStatus) { canvasPaintContext.font = dpZodiacLabelFont; canvasPaintContext.fillStyle = dpZodiacHexColor; canvasPaintContext.globalAlpha = 0.5; for (var index in zodiacPositionList) { if (zodiacPositionList.hasOwnProperty(index)) { var zodiacData = zodiacPositionList[index]; var positionX = zodiacData[0]; var positionY = zodiacData[1] + dpYPointsAdjustment; var zodiacName = zodiacData[2]; canvasPaintContext.fillText(zodiacName, positionX, positionY); } } canvasPaintContext.globalAlpha = 1; } } function drawDrikpanchangWatermark(chartCanvasId) { var kundaliChartCanvas = document.getElementById(chartCanvasId); var canvasPaintContext = kundaliChartCanvas.getContext('2d'); canvasPaintContext.save(); canvasPaintContext.font = dpWatermarkFont; canvasPaintContext.fillStyle = dpWatermarkColor; canvasPaintContext.fillText(dpChartWatermark, mX1 - 30, mY4 - 30); canvasPaintContext.restore(); }